<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\uvc_template.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\uvc_template.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Wed Jul 28 16:44:14 2021
<BR><P>
<H3>Maximum Stack Usage =        396 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[6]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6]">NMI_Handler</a><BR>
 <LI><a href="#[7]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">HardFault_Handler</a><BR>
 <LI><a href="#[8]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">MemManage_Handler</a><BR>
 <LI><a href="#[9]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">BusFault_Handler</a><BR>
 <LI><a href="#[a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">UsageFault_Handler</a><BR>
 <LI><a href="#[b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">SVC_Handler</a><BR>
 <LI><a href="#[c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">DebugMon_Handler</a><BR>
 <LI><a href="#[d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[d]">PendSV_Handler</a><BR>
 <LI><a href="#[21]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[21]">ADC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[9]">BusFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[23]">CAN1_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[24]">CAN1_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[25]">CAN1_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[22]">CAN1_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4f]">CAN2_RX0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[50]">CAN2_RX1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[51]">CAN2_SCE_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4e]">CAN2_TX_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5d]">DCMI_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1a]">DMA1_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1b]">DMA1_Stream1_IRQHandler</a> from stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1c]">DMA1_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1d]">DMA1_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1e]">DMA1_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[1f]">DMA1_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[20]">DMA1_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3e]">DMA1_Stream7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[47]">DMA2_Stream0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[48]">DMA2_Stream1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[49]">DMA2_Stream2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4a]">DMA2_Stream3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4b]">DMA2_Stream4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream7_IRQHandler</a> from stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[c]">DebugMon_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4c]">ETH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[4d]">ETH_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[15]">EXTI0_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[37]">EXTI15_10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[16]">EXTI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[17]">EXTI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[18]">EXTI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[19]">EXTI4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[26]">EXTI9_5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[13]">FLASH_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3f]">FMC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5f]">FPU_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5e]">HASH_RNG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[7]">HardFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2f]">I2C1_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2e]">I2C1_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[31]">I2C2_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[30]">I2C2_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[58]">I2C3_ER_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[57]">I2C3_EV_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[8]">MemManage_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[6]">NMI_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[52]">OTG_FS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_FS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[39]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5a]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[59]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5c]">OTG_HS_IRQHandler</a> from stm32f4xx_it.o(i.OTG_HS_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5b]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[10]">PVD_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[d]">PendSV_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[14]">RCC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[38]">RTC_Alarm_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[12]">RTC_WKUP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[5]">Reset_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[40]">SDIO_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[32]">SPI1_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[33]">SPI2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[42]">SPI3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[b]">SVC_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[e]">SysTick_Handler</a> from stm32f4xx_it.o(i.SysTick_Handler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[61]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[11]">TAMP_STAMP_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[27]">TIM1_BRK_TIM9_IRQHandler</a> from stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2a]">TIM1_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[29]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[28]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2b]">TIM2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2c]">TIM3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[2d]">TIM4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[45]">TIM6_DAC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[46]">TIM7_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3a]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3d]">TIM8_CC_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3c]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[3b]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[43]">UART4_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[44]">UART5_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[63]">UART_DMAAbortOnError</a> from stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError) referenced from stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
 <LI><a href="#[34]">USART1_IRQHandler</a> from stm32f4xx_it.o(i.USART1_IRQHandler) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[35]">USART2_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[36]">USART3_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[56]">USART6_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[64]">USBH_UserProcess</a> from usb_host.o(i.USBH_UserProcess) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[65]">USBH_UserProcess2</a> from usb_host.o(i.USBH_UserProcess2) referenced from usb_host.o(i.MX_USB_HOST_Init)
 <LI><a href="#[2]">USBH_VIDEO_ClassRequest</a> from usbh_video.o(i.USBH_VIDEO_ClassRequest) referenced 4 times from usbh_video.o(.data)
 <LI><a href="#[1]">USBH_VIDEO_InterfaceDeInit</a> from usbh_video.o(i.USBH_VIDEO_InterfaceDeInit) referenced 4 times from usbh_video.o(.data)
 <LI><a href="#[0]">USBH_VIDEO_InterfaceInit</a> from usbh_video.o(i.USBH_VIDEO_InterfaceInit) referenced 4 times from usbh_video.o(.data)
 <LI><a href="#[3]">USBH_VIDEO_ProcessDummy</a> from usbh_video.o(i.USBH_VIDEO_ProcessDummy) referenced 4 times from usbh_video.o(.data)
 <LI><a href="#[4]">USBH_VIDEO_SOFProcess</a> from usbh_video.o(i.USBH_VIDEO_SOFProcess) referenced 4 times from usbh_video.o(.data)
 <LI><a href="#[a]">UsageFault_Handler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[f]">WWDG_IRQHandler</a> from startup_stm32f407xx.o(.text) referenced from startup_stm32f407xx.o(RESET)
 <LI><a href="#[62]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f407xx.o(.text)
 <LI><a href="#[67]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[66]">fputc</a> from serial.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[68]">input_func</a> from mjpeg_decoding.o(i.input_func) referenced from mjpeg_decoding.o(i.mjpeg_decompression_and_draw)
 <LI><a href="#[60]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[69]">output_func</a> from mjpeg_decoding.o(i.output_func) referenced from mjpeg_decoding.o(i.mjpeg_decompression_and_draw)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[62]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[15f]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[6a]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[72]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[160]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[161]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[162]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[163]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[164]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[5]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f407xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[14d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;input_func
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_add_packet_data
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[166]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6c]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_SetCur
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_GetCur
</UL>

<P><STRONG><a name="[f9]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Usart1Init
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[168]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6e]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[12f]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_AnalyseFormatDescriptors
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[6b]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[169]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16a]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[70]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[16b]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[16c]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[16d]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1b]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DMA1_Stream1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.DMA2_Stream7_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = DMA2_Stream7_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[d3]"></a>Error_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(i.Error_Handler))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Usart1Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[b6]"></a>FSMC_NORSRAM_Extended_Timing_Init</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Extended_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[b4]"></a>FSMC_NORSRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FSMC_NORSRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[b5]"></a>FSMC_NORSRAM_Timing_Init</STRONG> (Thumb, 68 bytes, Stack size 12 bytes, stm32f4xx_ll_fsmc.o(i.FSMC_NORSRAM_Timing_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FSMC_NORSRAM_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[74]"></a>FSMC_SRAM_Init</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, sram.o(i.FSMC_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = FSMC_SRAM_Init &rArr; MySramInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySramInit
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cc]"></a>HAL_DMA_Abort_IT</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Abort_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[73]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 574 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA2_Stream7_IRQHandler
</UL>

<P><STRONG><a name="[77]"></a>HAL_DMA_Init</STRONG> (Thumb, 228 bytes, Stack size 24 bytes, stm32f4xx_hal_dma.o(i.HAL_DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CheckFifoParam
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_CalcBaseAndBitshift
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[7b]"></a>HAL_Delay</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[9b]"></a>HAL_GPIO_Init</STRONG> (Thumb, 466 bytes, Stack size 24 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GPIO_Config
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Usart1Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MySramInit
</UL>

<P><STRONG><a name="[ef]"></a>HAL_GPIO_WritePin</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal_gpio.o(i.HAL_GPIO_WritePin))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[78]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>

<P><STRONG><a name="[7c]"></a>HAL_HCD_Connect_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_Connect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[7e]"></a>HAL_HCD_Disconnect_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_Disconnect_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[80]"></a>HAL_HCD_GetCurrentFrame</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_GetCurrentFrame))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_HCD_GetCurrentFrame
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetCurrentFrame
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[82]"></a>HAL_HCD_GetCurrentSpeed</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_GetCurrentSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
</UL>

<P><STRONG><a name="[122]"></a>HAL_HCD_HC_GetURBState</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_GetURBState))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
</UL>

<P><STRONG><a name="[120]"></a>HAL_HCD_HC_GetXferCount</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_GetXferCount))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
</UL>

<P><STRONG><a name="[84]"></a>HAL_HCD_HC_Halt</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>

<P><STRONG><a name="[86]"></a>HAL_HCD_HC_Init</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>

<P><STRONG><a name="[d6]"></a>HAL_HCD_HC_NotifyURBChange_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, usbh_conf.o(i.HAL_HCD_HC_NotifyURBChange_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[88]"></a>HAL_HCD_HC_SubmitRequest</STRONG> (Thumb, 616 bytes, Stack size 40 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_HC_SubmitRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>

<P><STRONG><a name="[8a]"></a>HAL_HCD_IRQHandler</STRONG> (Thumb, 358 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadInterrupts
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_ReadInterrupt
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_GetMode
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_HS_IRQHandler
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OTG_FS_IRQHandler
</UL>

<P><STRONG><a name="[94]"></a>HAL_HCD_Init</STRONG> (Thumb, 90 bytes, Stack size 48 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_SetCurrentMode
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[95]"></a>HAL_HCD_MspInit</STRONG> (Thumb, 206 bytes, Stack size 32 bytes, usbh_conf.o(i.HAL_HCD_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[9e]"></a>HAL_HCD_ResetPort</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
</UL>

<P><STRONG><a name="[8f]"></a>HAL_HCD_SOF_Callback</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, usbh_conf.o(i.HAL_HCD_SOF_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_HCD_SOF_Callback &rArr; USBH_LL_IncTimer &rArr; USBH_HandleSof
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[a1]"></a>HAL_HCD_Start</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
</UL>

<P><STRONG><a name="[a4]"></a>HAL_HCD_Stop</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, stm32f4xx_hal_hcd.o(i.HAL_HCD_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
</UL>

<P><STRONG><a name="[fc]"></a>HAL_IncTick</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_hal.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_Init</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, stm32f4xx_hal.o(i.HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_Init &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a8]"></a>HAL_InitTick</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, stm32f4xx_hal.o(i.HAL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[a9]"></a>HAL_MspInit</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, stm32f4xx_hal_msp.o(i.HAL_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriorityGrouping
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[9d]"></a>HAL_NVIC_EnableIRQ</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_EnableIRQ))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[9c]"></a>HAL_NVIC_SetPriority</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_GetPriorityGrouping
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_MspInit
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
</UL>

<P><STRONG><a name="[a7]"></a>HAL_NVIC_SetPriorityGrouping</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_NVIC_SetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_MspInit
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
</UL>

<P><STRONG><a name="[ad]"></a>HAL_RCC_ClockConfig</STRONG> (Thumb, 446 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_ClockConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b0]"></a>HAL_RCC_GetHCLKFreq</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetHCLKFreq))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>

<P><STRONG><a name="[af]"></a>HAL_RCC_GetPCLK1Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK1Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[b1]"></a>HAL_RCC_GetPCLK2Freq</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetPCLK2Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>

<P><STRONG><a name="[ae]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_GetSysClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
</UL>

<P><STRONG><a name="[b2]"></a>HAL_RCC_OscConfig</STRONG> (Thumb, 1090 bytes, Stack size 16 bytes, stm32f4xx_hal_rcc.o(i.HAL_RCC_OscConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCC_OscConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[76]"></a>HAL_SRAM_Init</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL_SRAM_Init &rArr; FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_MspInit
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Timing_Init
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Init
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FSMC_Config
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[b3]"></a>HAL_SRAM_MspInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_sram.o(i.HAL_SRAM_MspInit))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>

<P><STRONG><a name="[fe]"></a>HAL_SYSTICK_CLKSourceConfig</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_CLKSourceConfig))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[b8]"></a>HAL_SYSTICK_Callback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Callback))
<BR><BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
</UL>

<P><STRONG><a name="[aa]"></a>HAL_SYSTICK_Config</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL_SYSTICK_Config &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_InitTick
</UL>

<P><STRONG><a name="[b7]"></a>HAL_SYSTICK_IRQHandler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.HAL_SYSTICK_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Callback
</UL>
<BR>[Called By]<UL><LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[c6]"></a>HAL_TIMEx_BreakCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_BreakCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c8]"></a>HAL_TIMEx_CommutationCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim_ex.o(i.HAL_TIMEx_CommutationCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[b9]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_MspInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Base_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[ba]"></a>HAL_TIM_Base_MspInit</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, stm32f4xx_hal_msp.o(i.HAL_TIM_Base_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[f1]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[bc]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 306 bytes, Stack size 24 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = HAL_TIM_ConfigClockSource &rArr; TIM_TI2_ConfigInputStage
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI2_ConfigInputStage
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TI1_ConfigInputStage
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITRx_SetConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
</UL>

<P><STRONG><a name="[c2]"></a>HAL_TIM_IC_CaptureCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IC_CaptureCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c1]"></a>HAL_TIM_IRQHandler</STRONG> (Thumb, 406 bytes, Stack size 8 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_CommutationCallback
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_BreakCallback
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_TriggerCallback
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PeriodElapsedCallback
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_PWM_PulseFinishedCallback
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_OC_DelayElapsedCallback
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IC_CaptureCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[c3]"></a>HAL_TIM_OC_DelayElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_OC_DelayElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c4]"></a>HAL_TIM_PWM_PulseFinishedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PWM_PulseFinishedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c5]"></a>HAL_TIM_PeriodElapsedCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_PeriodElapsedCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[c7]"></a>HAL_TIM_TriggerCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.HAL_TIM_TriggerCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
</UL>

<P><STRONG><a name="[cd]"></a>HAL_UART_ErrorCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_ErrorCallback))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_DMAAbortOnError
</UL>

<P><STRONG><a name="[c9]"></a>HAL_UART_IRQHandler</STRONG> (Thumb, 326 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Abort_IT
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Transmit_IT
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndRxTransfer
</UL>
<BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[d0]"></a>HAL_UART_Init</STRONG> (Thumb, 114 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_MspInit
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Usart1Init
</UL>

<P><STRONG><a name="[d1]"></a>HAL_UART_MspInit</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, serial.o(i.HAL_UART_MspInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_EnableIRQ
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[101]"></a>HAL_UART_RxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_RxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Receive_IT
</UL>

<P><STRONG><a name="[d4]"></a>HAL_UART_Transmit</STRONG> (Thumb, 214 bytes, Stack size 32 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[100]"></a>HAL_UART_TxCpltCallback</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.HAL_UART_TxCpltCallback))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_EndTransmit_IT
</UL>

<P><STRONG><a name="[e3]"></a>ILI9341_BackLed_Control</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bsp_ili9341_lcd.o(i.ILI9341_BackLed_Control))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[d8]"></a>ILI9341_Clear</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, bsp_ili9341_lcd.o(i.ILI9341_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ILI9341_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[db]"></a>ILI9341_DispChar_EN</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, bsp_ili9341_lcd.o(i.ILI9341_DispChar_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI9341_DispChar_EN &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN
</UL>

<P><STRONG><a name="[de]"></a>ILI9341_DispString_EN</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.ILI9341_DispString_EN))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ILI9341_DispString_EN &rArr; ILI9341_DispChar_EN &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>ILI9341_GramScan</STRONG> (Thumb, 172 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_GramScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9341_GramScan
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[e2]"></a>ILI9341_Init</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ILI9341_Init &rArr; ILI9341_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_REG_Config
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GPIO_Config
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FSMC_Config
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_SetColors
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GramScan
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_BackLed_Control
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[d9]"></a>ILI9341_OpenWindow</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, bsp_ili9341_lcd.o(i.ILI9341_OpenWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetCursor
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Color
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>

<P><STRONG><a name="[e4]"></a>ILI9341_Rst</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_Rst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9341_Rst &rArr; ILI9341_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[ea]"></a>ILI9341_Write_Color</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.ILI9341_Write_Color))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9341_Write_Color &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
</UL>

<P><STRONG><a name="[eb]"></a>LCD_Clear</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.LCD_Clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LCD_Clear &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ec]"></a>LCD_DrawImage</STRONG> (Thumb, 110 bytes, Stack size 40 bytes, bsp_ili9341_lcd.o(i.LCD_DrawImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = LCD_DrawImage &rArr; lcd_convert_yuyv_pixels &rArr; lcd_convert_yuyv_to_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_convert_yuyv_pixels
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Color
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e6]"></a>LCD_SetColors</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ili9341_lcd.o(i.LCD_SetColors))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[f2]"></a>MX_USB_HOST_Init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MX_USB_HOST_Init &rArr; USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f6]"></a>MX_USB_HOST_Process</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, usb_host.o(i.MX_USB_HOST_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f8]"></a>MX_Usart1Init</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, serial.o(i.MX_Usart1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_Usart1Init &rArr; HAL_UART_Init &rArr; HAL_UART_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[75]"></a>MySramInit</STRONG> (Thumb, 238 bytes, Stack size 32 bytes, sram.o(i.MySramInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MySramInit &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
</UL>

<P><STRONG><a name="[52]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_FS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OTG_FS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.OTG_HS_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = OTG_HS_IRQHandler &rArr; HAL_HCD_IRQHandler &rArr; HAL_HCD_Disconnect_Callback &rArr; USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>ParseCSDescriptors</STRONG> (Thumb, 442 bytes, Stack size 32 bytes, usbh_video_desc_parsing.o(i.ParseCSDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ParseCSDescriptors &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ParseCSDescriptors
</UL>

<P><STRONG><a name="[e]"></a>SysTick_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SysTick_Handler &rArr; HAL_SYSTICK_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_IRQHandler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[fd]"></a>SystemClock_Config</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, main.o(i.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SystemClock_Config &rArr; HAL_RCC_ClockConfig &rArr; HAL_InitTick &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_CLKSourceConfig
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_OscConfig
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetHCLKFreq
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_ClockConfig
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, system_stm32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
</UL>

<P><STRONG><a name="[61]"></a>SystemInit</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, system_stm32f4xx.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.TIM1_BRK_TIM9_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = TIM1_BRK_TIM9_IRQHandler &rArr; timer9_interrupt_process &rArr; USB_HOST_fast_class_call &rArr; USBH_VIDEO_Process &rArr; USBH_VIDEO_InputStream &rArr; USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_IRQHandler
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer9_interrupt_process
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[bb]"></a>TIM_Base_SetConfig</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_Base_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
</UL>

<P><STRONG><a name="[34]"></a>USART1_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USART1_IRQHandler &rArr; HAL_UART_IRQHandler &rArr; UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f407xx.o(RESET)
</UL>
<P><STRONG><a name="[102]"></a>USBH_AllocPipe</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_AllocPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_AllocPipe
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetFreePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[104]"></a>USBH_ClosePipe</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_pipes.o(i.USBH_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ClosePipe
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceDeInit
</UL>

<P><STRONG><a name="[106]"></a>USBH_CtlReceiveData</STRONG> (Thumb, 42 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_CtlReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_CtlReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[108]"></a>USBH_CtlReq</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_CtlReq))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>
<BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_SetCur
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_GetCur
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
</UL>

<P><STRONG><a name="[10a]"></a>USBH_CtlSendData</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_CtlSendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[10b]"></a>USBH_CtlSendSetup</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, usbh_ioreq.o(i.USBH_CtlSendSetup))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = USBH_CtlSendSetup &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[10c]"></a>USBH_Delay</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, usbh_conf.o(i.USBH_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USBH_Delay &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[136]"></a>USBH_FindInterface</STRONG> (Thumb, 80 bytes, Stack size 20 bytes, usbh_core.o(i.USBH_FindInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_FindInterface
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[13b]"></a>USBH_FindInterfaceIndex</STRONG> (Thumb, 62 bytes, Stack size 20 bytes, usbh_core.o(i.USBH_FindInterfaceIndex))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_FindInterfaceIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ParseCSDescriptors
</UL>

<P><STRONG><a name="[11c]"></a>USBH_FreePipe</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_FreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceDeInit
</UL>

<P><STRONG><a name="[10d]"></a>USBH_GetDescriptor</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_GetDescriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[127]"></a>USBH_GetNextDesc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_GetNextDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_GetNextDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ParseCSDescriptors
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[10e]"></a>USBH_Get_CfgDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_CfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_Get_CfgDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[110]"></a>USBH_Get_DevDesc</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_Get_DevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = USBH_Get_DevDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[112]"></a>USBH_Get_StringDesc</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, usbh_ctlreq.o(i.USBH_Get_StringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetDescriptor
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[f3]"></a>USBH_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = USBH_Init &rArr; USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[11b]"></a>USBH_IsocReceiveData</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, usbh_ioreq.o(i.USBH_IsocReceiveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SubmitURB
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InputStream
</UL>

<P><STRONG><a name="[105]"></a>USBH_LL_ClosePipe</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, usbh_conf.o(i.USBH_LL_ClosePipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
</UL>

<P><STRONG><a name="[7d]"></a>USBH_LL_Connect</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_LL_Connect
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
</UL>

<P><STRONG><a name="[7f]"></a>USBH_LL_Disconnect</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_Disconnect))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USBH_LL_Disconnect &rArr; USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Disconnect_Callback
</UL>

<P><STRONG><a name="[11e]"></a>USBH_LL_DriverVBUS</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_DriverVBUS))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_LL_DriverVBUS &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[11f]"></a>USBH_LL_GetLastXferSize</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_GetLastXferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetLastXferSize
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetXferCount
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InputStream
</UL>

<P><STRONG><a name="[121]"></a>USBH_LL_GetSpeed</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_GetSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_LL_GetSpeed &rArr; HAL_HCD_GetCurrentSpeed &rArr; USB_GetHostSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[114]"></a>USBH_LL_GetURBState</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_GetURBState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_GetURBState
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_GetURBState
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InputStream
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[a0]"></a>USBH_LL_IncTimer</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_LL_IncTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = USBH_LL_IncTimer &rArr; USBH_HandleSof
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_SOF_Callback
</UL>

<P><STRONG><a name="[11a]"></a>USBH_LL_Init</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = USBH_LL_Init &rArr; HAL_HCD_Init &rArr; HAL_HCD_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetTimer
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[125]"></a>USBH_LL_OpenPipe</STRONG> (Thumb, 114 bytes, Stack size 56 bytes, usbh_conf.o(i.USBH_LL_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
</UL>

<P><STRONG><a name="[126]"></a>USBH_LL_ResetPort</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = USBH_LL_ResetPort &rArr; HAL_HCD_ResetPort &rArr; USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[124]"></a>USBH_LL_SetTimer</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_core.o(i.USBH_LL_SetTimer))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Init
</UL>

<P><STRONG><a name="[13a]"></a>USBH_LL_SetToggle</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, usbh_conf.o(i.USBH_LL_SetToggle))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_LL_SetToggle
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[11d]"></a>USBH_LL_Start</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Start
</UL>

<P><STRONG><a name="[115]"></a>USBH_LL_Stop</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_conf.o(i.USBH_LL_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = USBH_LL_Stop &rArr; HAL_HCD_Stop &rArr; USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
</UL>

<P><STRONG><a name="[107]"></a>USBH_LL_SubmitURB</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, usbh_conf.o(i.USBH_LL_SubmitURB))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocReceiveData
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
</UL>

<P><STRONG><a name="[117]"></a>USBH_OpenPipe</STRONG> (Thumb, 42 bytes, Stack size 48 bytes, usbh_pipes.o(i.USBH_OpenPipe))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_OpenPipe
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[f7]"></a>USBH_Process</STRONG> (Thumb, 562 bytes, Stack size 32 bytes, usbh_core.o(i.USBH_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_ResetPort
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetSpeed
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetCfg
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeInitStateMachine
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
</UL>

<P><STRONG><a name="[f4]"></a>USBH_RegisterClass</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, usbh_core.o(i.USBH_RegisterClass))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_RegisterClass &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[118]"></a>USBH_SetAddress</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_SetAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_SetAddress &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[12a]"></a>USBH_SetCfg</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_SetCfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_SetCfg &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[12b]"></a>USBH_SetInterface</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, usbh_ctlreq.o(i.USBH_SetInterface))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = USBH_SetInterface &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ClassRequest
</UL>

<P><STRONG><a name="[f5]"></a>USBH_Start</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_Start &rArr; USBH_LL_Start &rArr; HAL_HCD_Start &rArr; USB_DriveVbus
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Start
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_DriverVBUS
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
</UL>

<P><STRONG><a name="[12e]"></a>USBH_VIDEO_AnalyseFormatDescriptors</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, usbh_video_desc_parsing.o(i.USBH_VIDEO_AnalyseFormatDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_VIDEO_AnalyseFormatDescriptors &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[130]"></a>USBH_VIDEO_AnalyseFrameDescriptors</STRONG> (Thumb, 176 bytes, Stack size 16 bytes, usbh_video_desc_parsing.o(i.USBH_VIDEO_AnalyseFrameDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = USBH_VIDEO_AnalyseFrameDescriptors &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[138]"></a>USBH_VIDEO_FindStreamingIN</STRONG> (Thumb, 294 bytes, Stack size 20 bytes, usbh_video_desc_parsing.o(i.USBH_VIDEO_FindStreamingIN))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USBH_VIDEO_FindStreamingIN
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[139]"></a>USBH_VIDEO_ParseCSDescriptors</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, usbh_video_desc_parsing.o(i.USBH_VIDEO_ParseCSDescriptors))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = USBH_VIDEO_ParseCSDescriptors &rArr; ParseCSDescriptors &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCSDescriptors
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterfaceIndex
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[13c]"></a>USBH_VIDEO_Process</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, usbh_video.o(i.USBH_VIDEO_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = USBH_VIDEO_Process &rArr; USBH_VIDEO_InputStream &rArr; USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InputStream
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_fast_class_call
</UL>

<P><STRONG><a name="[12d]"></a>USBH_VS_GetCur</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, usbh_video.o(i.USBH_VS_GetCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_VS_GetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UserProcess2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UserProcess
</UL>

<P><STRONG><a name="[12c]"></a>USBH_VS_SetCur</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, usbh_video.o(i.USBH_VS_SetCur))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = USBH_VS_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UserProcess2
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_UserProcess
</UL>

<P><STRONG><a name="[98]"></a>USB_CoreInit</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_CoreInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_CoreInit
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreReset
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[96]"></a>USB_DisableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_DisableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>

<P><STRONG><a name="[13e]"></a>USB_DoPing</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_DoPing))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[a3]"></a>USB_DriveVbus</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_DriveVbus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_DriveVbus
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[a2]"></a>USB_EnableGlobalInt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_EnableGlobalInt))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Start
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
</UL>

<P><STRONG><a name="[142]"></a>USB_FlushRxFifo</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_FlushRxFifo))
<BR><BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[141]"></a>USB_FlushTxFifo</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_FlushTxFifo))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_FlushTxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_StopHost
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HostInit
</UL>

<P><STRONG><a name="[81]"></a>USB_GetCurrentFrame</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetCurrentFrame))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentFrame
</UL>

<P><STRONG><a name="[83]"></a>USB_GetHostSpeed</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_GetHostSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_GetHostSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_GetCurrentSpeed
</UL>

<P><STRONG><a name="[8b]"></a>USB_GetMode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_GetMode))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[85]"></a>USB_HC_Halt</STRONG> (Thumb, 328 bytes, Stack size 8 bytes, stm32f4xx_ll_usb.o(i.USB_HC_Halt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Halt
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_OUT_IRQHandler
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_HC_IN_IRQHandler
</UL>

<P><STRONG><a name="[87]"></a>USB_HC_Init</STRONG> (Thumb, 392 bytes, Stack size 24 bytes, stm32f4xx_ll_usb.o(i.USB_HC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USB_HC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_Init
</UL>

<P><STRONG><a name="[90]"></a>USB_HC_ReadInterrupt</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_HC_ReadInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[89]"></a>USB_HC_StartXfer</STRONG> (Thumb, 386 bytes, Stack size 40 bytes, stm32f4xx_ll_usb.o(i.USB_HC_StartXfer))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_WritePacket
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DoPing
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_SubmitRequest
</UL>

<P><STRONG><a name="[140]"></a>USB_HOST_fast_class_call</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, usb_host.o(i.USB_HOST_fast_class_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = USB_HOST_fast_class_call &rArr; USBH_VIDEO_Process &rArr; USBH_VIDEO_InputStream &rArr; USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_Process
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer9_interrupt_process
</UL>

<P><STRONG><a name="[9a]"></a>USB_HostInit</STRONG> (Thumb, 234 bytes, Stack size 32 bytes, stm32f4xx_ll_usb.o(i.USB_HostInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USB_HostInit &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DriveVbus
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[8d]"></a>USB_InitFSLSPClkSel</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_InitFSLSPClkSel))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_Port_IRQHandler
</UL>

<P><STRONG><a name="[8c]"></a>USB_ReadInterrupts</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_ReadInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[d7]"></a>USB_ReadPacket</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, stm32f4xx_ll_usb.o(i.USB_ReadPacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCD_RXQLVL_IRQHandler
</UL>

<P><STRONG><a name="[9f]"></a>USB_ResetPort</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_ResetPort))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_ResetPort &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_ResetPort
</UL>

<P><STRONG><a name="[99]"></a>USB_SetCurrentMode</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, stm32f4xx_ll_usb.o(i.USB_SetCurrentMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USB_SetCurrentMode &rArr; HAL_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Init
</UL>

<P><STRONG><a name="[a5]"></a>USB_StopHost</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_StopHost))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USB_StopHost &rArr; USB_FlushTxFifo
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_EnableGlobalInt
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_DisableGlobalInt
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushTxFifo
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_FlushRxFifo
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Stop
</UL>

<P><STRONG><a name="[13f]"></a>USB_WritePacket</STRONG> (Thumb, 48 bytes, Stack size 20 bytes, stm32f4xx_ll_usb.o(i.USB_WritePacket))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = USB_WritePacket
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_StartXfer
</UL>

<P><STRONG><a name="[143]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16e]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[fb]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Disconnect
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_RegisterClass
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ParseCSDescriptors
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_AnalyseFrameDescriptors
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_AnalyseFormatDescriptors
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleControl
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_HandleEnum
</UL>

<P><STRONG><a name="[145]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[16f]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[158]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[170]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[171]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[172]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[14b]"></a>delay_init</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, delay.o(i.delay_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = delay_init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[66]"></a>fputc</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, serial.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fputc &rArr; HAL_UART_Transmit &rArr; UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[135]"></a>free</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, malloc.o(i.free))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceDeInit
</UL>

<P><STRONG><a name="[68]"></a>input_func</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, mjpeg_decoding.o(i.input_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = input_func
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mjpeg_decoding.o(i.mjpeg_decompression_and_draw)
</UL>
<P><STRONG><a name="[14e]"></a>jd_decomp</STRONG> (Thumb, 162 bytes, Stack size 48 bytes, tjpgd.o(i.jd_decomp))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;restart
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_output
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mjpeg_decompression_and_draw
</UL>

<P><STRONG><a name="[152]"></a>jd_prepare</STRONG> (Thumb, 948 bytes, Stack size 64 bytes, tjpgd.o(i.jd_prepare))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = jd_prepare &rArr; create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mjpeg_decompression_and_draw
</UL>

<P><STRONG><a name="[ed]"></a>lcd_convert_yuyv_pixels</STRONG> (Thumb, 52 bytes, Stack size 32 bytes, bsp_ili9341_lcd.o(i.lcd_convert_yuyv_pixels))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lcd_convert_yuyv_pixels &rArr; lcd_convert_yuyv_to_rgb
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_convert_yuyv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
</UL>

<P><STRONG><a name="[153]"></a>lcd_convert_yuyv_to_rgb</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, bsp_ili9341_lcd.o(i.lcd_convert_yuyv_to_rgb))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lcd_convert_yuyv_to_rgb
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_convert_yuyv_pixels
</UL>

<P><STRONG><a name="[154]"></a>lcd_set_pixel</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.lcd_set_pixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_set_pixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_SetCursor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;output_func
</UL>

<P><STRONG><a name="[156]"></a>lcd_switch_buffer</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_ili9341_lcd.o(i.lcd_switch_buffer))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[60]"></a>main</STRONG> (Thumb, 272 bytes, Stack size 32 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = main &rArr; MX_USB_HOST_Process &rArr; USBH_Process &rArr; USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_ready_update
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_init_buffers
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mjpeg_decompression_and_draw
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_switch_buffer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_Usart1Init
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Process
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USB_HOST_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_DrawImage
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispString_EN
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Delay
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FSMC_SRAM_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM9_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[137]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc.o(i.malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InterfaceInit
</UL>

<P><STRONG><a name="[157]"></a>mjpeg_decompression_and_draw</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, mjpeg_decoding.o(i.mjpeg_decompression_and_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = mjpeg_decompression_and_draw &rArr; jd_decomp &rArr; mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[69]"></a>output_func</STRONG> (Thumb, 70 bytes, Stack size 32 bytes, mjpeg_decoding.o(i.output_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = output_func &rArr; lcd_set_pixel &rArr; ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
</UL>
<BR>[Address Reference Count : 1]<UL><LI> mjpeg_decoding.o(i.mjpeg_decompression_and_draw)
</UL>
<P><STRONG><a name="[ff]"></a>timer9_interrupt_process</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, main.o(i.timer9_interrupt_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = timer9_interrupt_process &rArr; USB_HOST_fast_class_call &rArr; USBH_VIDEO_Process &rArr; USBH_VIDEO_InputStream &rArr; USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HOST_fast_class_call
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM1_BRK_TIM9_IRQHandler
</UL>

<P><STRONG><a name="[15d]"></a>video_stream_add_packet_data</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, usbh_video_stream_parsing.o(i.video_stream_add_packet_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = video_stream_add_packet_data
</UL>
<BR>[Calls]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_process_packet
</UL>

<P><STRONG><a name="[155]"></a>video_stream_init_buffers</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, usbh_video_stream_parsing.o(i.video_stream_init_buffers))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>video_stream_process_packet</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, usbh_video_stream_parsing.o(i.video_stream_process_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = video_stream_process_packet &rArr; video_stream_add_packet_data
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_switch_buffers
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_add_packet_data
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_InputStream
</UL>

<P><STRONG><a name="[159]"></a>video_stream_ready_update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, usbh_video_stream_parsing.o(i.video_stream_ready_update))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[15e]"></a>video_stream_switch_buffers</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, usbh_video_stream_parsing.o(i.video_stream_switch_buffers))
<BR><BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_process_packet
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[ee]"></a>MX_GPIO_Init</STRONG> (Thumb, 528 bytes, Stack size 32 bytes, main.o(i.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MX_GPIO_Init &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_WritePin
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[f0]"></a>MX_TIM9_Init</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, main.o(i.MX_TIM9_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = MX_TIM9_Init &rArr; HAL_TIM_Base_Init &rArr; HAL_TIM_Base_MspInit &rArr; HAL_NVIC_SetPriority &rArr; NVIC_SetPriority
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Error_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[64]"></a>USBH_UserProcess</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_host.o(i.USBH_UserProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_UserProcess &rArr; USBH_VS_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_SetCur
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_GetCur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[65]"></a>USBH_UserProcess2</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, usb_host.o(i.USBH_UserProcess2))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_UserProcess2 &rArr; USBH_VS_SetCur &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_SetCur
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VS_GetCur
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usb_host.o(i.MX_USB_HOST_Init)
</UL>
<P><STRONG><a name="[e7]"></a>Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_REG_Config
</UL>

<P><STRONG><a name="[e8]"></a>ILI9341_Delay</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_Delay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ILI9341_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_REG_Config
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Rst
</UL>

<P><STRONG><a name="[df]"></a>ILI9341_FSMC_Config</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_FSMC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9341_FSMC_Config &rArr; HAL_SRAM_Init &rArr; FSMC_NORSRAM_Extended_Timing_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SRAM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[da]"></a>ILI9341_FillColor</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.ILI9341_FillColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9341_FillColor
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD_Clear
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Clear
</UL>

<P><STRONG><a name="[e0]"></a>ILI9341_GPIO_Config</STRONG> (Thumb, 264 bytes, Stack size 32 bytes, bsp_ili9341_lcd.o(i.ILI9341_GPIO_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ILI9341_GPIO_Config &rArr; HAL_GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[e5]"></a>ILI9341_REG_Config</STRONG> (Thumb, 684 bytes, Stack size 8 bytes, bsp_ili9341_lcd.o(i.ILI9341_REG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ILI9341_REG_Config &rArr; ILI9341_Delay
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Data
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Cmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Delay
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Init
</UL>

<P><STRONG><a name="[e9]"></a>ILI9341_SetCursor</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, bsp_ili9341_lcd.o(i.ILI9341_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ILI9341_SetCursor &rArr; ILI9341_OpenWindow
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_set_pixel
</UL>

<P><STRONG><a name="[dc]"></a>ILI9341_Write_Cmd</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ili9341_lcd.o(i.ILI9341_Write_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_REG_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Color
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GramScan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
</UL>

<P><STRONG><a name="[dd]"></a>ILI9341_Write_Data</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_ili9341_lcd.o(i.ILI9341_Write_Data))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_REG_Config
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_FillColor
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_Write_Color
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_OpenWindow
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_GramScan
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ILI9341_DispChar_EN
</UL>

<P><STRONG><a name="[ab]"></a>NVIC_GetPriorityGrouping</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f4xx_hal_cortex.o(i.NVIC_GetPriorityGrouping))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[ac]"></a>NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_cortex.o(i.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SYSTICK_Config
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_NVIC_SetPriority
</UL>

<P><STRONG><a name="[7a]"></a>DMA_CalcBaseAndBitshift</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CalcBaseAndBitshift))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[79]"></a>DMA_CheckFifoParam</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, stm32f4xx_hal_dma.o(i.DMA_CheckFifoParam))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_Init
</UL>

<P><STRONG><a name="[91]"></a>HCD_HC_IN_IRQHandler</STRONG> (Thumb, 1284 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HCD_HC_IN_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_IN_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[92]"></a>HCD_HC_OUT_IRQHandler</STRONG> (Thumb, 1264 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HCD_HC_OUT_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HCD_HC_OUT_IRQHandler &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_HC_NotifyURBChange_Callback
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_HC_Halt
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[8e]"></a>HCD_Port_IRQHandler</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, stm32f4xx_hal_hcd.o(i.HCD_Port_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HCD_Port_IRQHandler &rArr; HAL_HCD_Connect_Callback &rArr; USBH_LL_Connect
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_Connect_Callback
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_InitFSLSPClkSel
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[93]"></a>HCD_RXQLVL_IRQHandler</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, stm32f4xx_hal_hcd.o(i.HCD_RXQLVL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = HCD_RXQLVL_IRQHandler &rArr; USB_ReadPacket
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_ReadPacket
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_HCD_IRQHandler
</UL>

<P><STRONG><a name="[bd]"></a>TIM_ETR_SetConfig</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_ETR_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_ETR_SetConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[bf]"></a>TIM_ITRx_SetConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f4xx_hal_tim.o(i.TIM_ITRx_SetConfig))
<BR><BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[be]"></a>TIM_TI1_ConfigInputStage</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI1_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI1_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[c0]"></a>TIM_TI2_ConfigInputStage</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, stm32f4xx_hal_tim.o(i.TIM_TI2_ConfigInputStage))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TI2_ConfigInputStage
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
</UL>

<P><STRONG><a name="[63]"></a>UART_DMAAbortOnError</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_DMAAbortOnError))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_DMAAbortOnError
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_ErrorCallback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> stm32f4xx_hal_uart.o(i.HAL_UART_IRQHandler)
</UL>
<P><STRONG><a name="[cb]"></a>UART_EndRxTransfer</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_EndRxTransfer))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>UART_EndTransmit_IT</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, stm32f4xx_hal_uart.o(i.UART_EndTransmit_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_EndTransmit_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_TxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[ca]"></a>UART_Receive_IT</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, stm32f4xx_hal_uart.o(i.UART_Receive_IT))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UART_Receive_IT
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_RxCpltCallback
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d2]"></a>UART_SetConfig</STRONG> (Thumb, 864 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_SetConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_SetConfig &rArr; HAL_RCC_GetPCLK2Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK2Freq
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK1Freq
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[ce]"></a>UART_Transmit_IT</STRONG> (Thumb, 104 bytes, Stack size 0 bytes, stm32f4xx_hal_uart.o(i.UART_Transmit_IT))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_IRQHandler
</UL>

<P><STRONG><a name="[d5]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, stm32f4xx_hal_uart.o(i.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
</UL>

<P><STRONG><a name="[13d]"></a>USB_CoreReset</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, stm32f4xx_ll_usb.o(i.USB_CoreReset))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USB_CoreInit
</UL>

<P><STRONG><a name="[119]"></a>DeInitStateMachine</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, usbh_core.o(i.DeInitStateMachine))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Init
</UL>

<P><STRONG><a name="[116]"></a>USBH_HandleEnum</STRONG> (Thumb, 480 bytes, Stack size 24 bytes, usbh_core.o(i.USBH_HandleEnum))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = USBH_HandleEnum &rArr; USBH_Get_StringDesc &rArr; USBH_GetDescriptor &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Delay
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetAddress
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Process
</UL>

<P><STRONG><a name="[123]"></a>USBH_HandleSof</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, usbh_core.o(i.USBH_HandleSof))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_HandleSof
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_IncTimer
</UL>

<P><STRONG><a name="[109]"></a>USBH_HandleControl</STRONG> (Thumb, 464 bytes, Stack size 24 bytes, usbh_ctlreq.o(i.USBH_HandleControl))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_Stop
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendSetup
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlSendData
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReceiveData
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_CtlReq
</UL>

<P><STRONG><a name="[10f]"></a>USBH_ParseCfgDesc</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, usbh_ctlreq.o(i.USBH_ParseCfgDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = USBH_ParseCfgDesc &rArr; USBH_GetNextDesc
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_GetNextDesc
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseInterfaceDesc
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseEPDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_CfgDesc
</UL>

<P><STRONG><a name="[111]"></a>USBH_ParseDevDesc</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, usbh_ctlreq.o(i.USBH_ParseDevDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_ParseDevDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_DevDesc
</UL>

<P><STRONG><a name="[129]"></a>USBH_ParseEPDesc</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseEPDesc))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[128]"></a>USBH_ParseInterfaceDesc</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, usbh_ctlreq.o(i.USBH_ParseInterfaceDesc))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ParseCfgDesc
</UL>

<P><STRONG><a name="[113]"></a>USBH_ParseStringDesc</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, usbh_ctlreq.o(i.USBH_ParseStringDesc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USBH_ParseStringDesc
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_Get_StringDesc
</UL>

<P><STRONG><a name="[103]"></a>USBH_GetFreePipe</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, usbh_pipes.o(i.USBH_GetFreePipe))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
</UL>

<P><STRONG><a name="[132]"></a>USBH_VIDEO_CSRequest</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, usbh_video.o(i.USBH_VIDEO_CSRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USBH_VIDEO_CSRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_HandleCSRequest
</UL>

<P><STRONG><a name="[2]"></a>USBH_VIDEO_ClassRequest</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, usbh_video.o(i.USBH_VIDEO_ClassRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = USBH_VIDEO_ClassRequest &rArr; USBH_SetInterface &rArr; USBH_CtlReq &rArr; USBH_HandleControl &rArr; USBH_CtlSendData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_HandleCSRequest
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_SetInterface
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_video.o(.data)
</UL>
<P><STRONG><a name="[131]"></a>USBH_VIDEO_HandleCSRequest</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, usbh_video.o(i.USBH_VIDEO_HandleCSRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USBH_VIDEO_HandleCSRequest &rArr; USBH_VIDEO_CSRequest
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_CSRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ClassRequest
</UL>

<P><STRONG><a name="[133]"></a>USBH_VIDEO_InputStream</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, usbh_video.o(i.USBH_VIDEO_InputStream))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = USBH_VIDEO_InputStream &rArr; USBH_IsocReceiveData &rArr; USBH_LL_SubmitURB &rArr; HAL_HCD_HC_SubmitRequest &rArr; USB_HC_StartXfer &rArr; USB_WritePacket
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetURBState
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_GetLastXferSize
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;video_stream_process_packet
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_IsocReceiveData
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_Process
</UL>

<P><STRONG><a name="[1]"></a>USBH_VIDEO_InterfaceDeInit</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, usbh_video.o(i.USBH_VIDEO_InterfaceDeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = USBH_VIDEO_InterfaceDeInit &rArr; USBH_ClosePipe &rArr; USBH_LL_ClosePipe &rArr; HAL_HCD_HC_Halt &rArr; USB_HC_Halt
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_ClosePipe
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FreePipe
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_video.o(.data)
</UL>
<P><STRONG><a name="[0]"></a>USBH_VIDEO_InterfaceInit</STRONG> (Thumb, 480 bytes, Stack size 48 bytes, usbh_video.o(i.USBH_VIDEO_InterfaceInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = USBH_VIDEO_InterfaceInit &rArr; USBH_OpenPipe &rArr; USBH_LL_OpenPipe &rArr; HAL_HCD_HC_Init &rArr; USB_HC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_LL_SetToggle
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_ParseCSDescriptors
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_FindStreamingIN
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_AnalyseFrameDescriptors
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_VIDEO_AnalyseFormatDescriptors
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_OpenPipe
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_AllocPipe
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USBH_FindInterface
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> usbh_video.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>USBH_VIDEO_ProcessDummy</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_video.o(i.USBH_VIDEO_ProcessDummy))
<BR>[Address Reference Count : 1]<UL><LI> usbh_video.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>USBH_VIDEO_SOFProcess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, usbh_video.o(i.USBH_VIDEO_SOFProcess))
<BR>[Address Reference Count : 1]<UL><LI> usbh_video.o(.data)
</UL>
<P><STRONG><a name="[149]"></a>alloc_pool</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tjpgd.o(i.alloc_pool))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_qt_tbl
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_huffman_tbl
</UL>

<P><STRONG><a name="[15b]"></a>bitext</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, tjpgd.o(i.bitext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[15c]"></a>block_idct</STRONG> (Thumb, 676 bytes, Stack size 64 bytes, tjpgd.o(i.block_idct))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = block_idct
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[148]"></a>create_huffman_tbl</STRONG> (Thumb, 308 bytes, Stack size 72 bytes, tjpgd.o(i.create_huffman_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = create_huffman_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[14a]"></a>create_qt_tbl</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, tjpgd.o(i.create_qt_tbl))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = create_qt_tbl
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;alloc_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_prepare
</UL>

<P><STRONG><a name="[15a]"></a>huffext</STRONG> (Thumb, 192 bytes, Stack size 56 bytes, tjpgd.o(i.huffext))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = huffext
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_load
</UL>

<P><STRONG><a name="[150]"></a>mcu_load</STRONG> (Thumb, 452 bytes, Stack size 72 bytes, tjpgd.o(i.mcu_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = mcu_load &rArr; block_idct
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;huffext
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_idct
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bitext
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[151]"></a>mcu_output</STRONG> (Thumb, 526 bytes, Stack size 80 bytes, tjpgd.o(i.mcu_output))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = mcu_output
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[14f]"></a>restart</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, tjpgd.o(i.restart))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = restart
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jd_decomp
</UL>

<P><STRONG><a name="[144]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[147]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[146]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[67]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
